<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/rabbit
         http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc.xsd
         http://www.springframework.org/schema/cache
         http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">
    <!-- 默认的注解映射的支持 -->
    <mvc:annotation-driven/>
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--加载redis参数-->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    <!-- jedis 连接池配置参数： -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 设置最大连接数 -->
        <property name="maxTotal" value="${redis.maxActive}"></property>
        <!-- 设置最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <!-- 设置超时时间 -->
        <property name="maxWaitMillis" value="${redis.maxWait}"></property>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
        <property name="testOnReturn" value="${redis.testOnReturn}"></property>
    </bean>

    <!-- jedis 连接池 连接本地redis服务 构造器注入 -->
    <bean id="JedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="poolConfig"/>
        <constructor-arg index="1" value="${redis.host}"/>
        <constructor-arg index="2" value="${redis.port}"/>
        <constructor-arg index="3" value="${redis.maxWait}"/>
    </bean>

    <!-- redis cache config -->
    <bean id="redisCache" class="com.ssm.clent.RedisCache">
        <property name="pool" ref="JedisPool"/>
    </bean>

    <!-- 注解扫描包 -->
    <context:component-scan base-package="com.ssm"/>
    <!-- 加载jdbc.properties文件  -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    <!--第一步: 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 配置和mybatis的整合  -->
    <!--第二步: 创建sqlSessionFactory工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 指定Mybatis全局配置文件的位置 -->
        <property name="configLocation" value="classpath:sqlConfig.xml"></property>
    </bean>

    <!-- 配置mybatis的代理接口开发 * 接口类名和映射文件必须同名 *
    接口类和映射文件必须在同一个目录下 * 接口的映射文件的namespace名称必须是接口的全限定名
    * 接口的方法名必须和映射的statement的id一致 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有dao接口的实现，加入到ioc容器中  -->
        <property name="basePackage" value="com.ssm.mapper"></property>
        <property name="SqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!--第三步: 事物 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置拦截service -->
    <aop:config>
        <aop:pointcut expression="execution(* com.ssm.service..*(..))" id="txPoint"/>
         <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!-- 配置事物增强,事物如何切入-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 所有方法都是事物方法 -->
            <tx:method name="*"/>
            <!-- 以get开始的所有方法 -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--邮件发送bean配置-->
    <context:property-placeholder location="classpath:mail.properties" ignore-unresolvable="true"/>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}" />
        <property name="defaultEncoding" value="${mail.defaultEncoding}" />
        <property name="username" value="${mail.username}" />
        <property name="password" value="${mail.password}"/>

        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
                <prop key="mail.smtp.starttls.required">${mail.smtp.starttls.required}</prop>
            </props>
        </property>
    </bean>


    <!--<import resource="spring-redis.xml"/>-->
    <context:property-placeholder location="classpath:rabbitMQ.properties" ignore-unresolvable="true"/>

    <!--配置connection-factory,指定连接rabbit server参数-->
    <rabbit:connection-factory id="connectionFactory"
                               username="${mq.username}"
                               password="${mq.password}"
                               host="${mq.host}"
                               port="${mq.port}"/>
    <!--2、配置队列queue, Exchange, 以及将他们结合在一起的binding-->
    <!--在queue以及exchange中, 有一个重要的属性durable, 默认为true, 可以防止宕机后数据丢失。-->
    <!--在listener-container中, 有acknowledge属性, 默认为auto, 即消费者成功处理消息后必须有个应答, 如果消费者程序发生异常或者宕机, 消息会被重新放回队列-->
    <rabbit:admin connection-factory="connectionFactory"/>
    <rabbit:queue id="userAlertEmailQueue" name="user.alerts.email" durable="true"/>  <!--durable默认为true-->

    <!--标准的AMQP Exchange有4种: Direct, Topic, Headers, Fanout, 根据实际需要选择。-->
    <!--Direct: 如果消息的routing key与bingding的routing key直接匹配的话, 消息将会路由到该队列上。-->
    <!--Topic: 如果消息的routing key与bingding的routing key符和通配符匹配的话, 消息将会路由到该队列上。-->
    <!--Headers: 如果消息参数表中的头信息和值都与binding参数表中相匹配, 消息将会路由到该队列上。-->
    <!--Fanout: 不管消息的routing key和参数表的头信息/值是什么, 消息将会路由到该队列上。-->
    <rabbit:direct-exchange name="user.alert.email.exchange" durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="user.alerts.email" />     <!--默认的routing key与队列的名称相同-->
        </rabbit:bindings>
    </rabbit:direct-exchange>
    <!--3、配置RabbitTemplate发送消息-->
    <rabbit:template id="rabbitTemplate"
                     connection-factory="connectionFactory"/>
    <!--4、配置监听器容器和监听器来接收消息-->
    <bean id="userListener" class="com.ssm.service.handler.UserAlertHandler"></bean>
    <!--concurrency: 初始化监听器容器时, 并发消费者的数目.-->
    <!--max-concurrency: 并发消费者的最大数目.-->
    <!--prefetch: 一次最多可以发送给同一个消费者的消息数目.-->
    <rabbit:listener-container connection-factory="connectionFactory"
                               acknowledge="manual" prefetch="2" concurrency="2" max-concurrency="5">
        <rabbit:listener ref="userListener"
                         queues="userAlertEmailQueue"/>
    </rabbit:listener-container>

    <import resource="spring-dubbo.xml"/>


</beans>
